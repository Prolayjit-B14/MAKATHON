#include <WiFi.h>
#include <ESP_Mail_Client.h>
#include <time.h>

// Wi-Fi Credentials
const char* ssid = "XXXXXXXXXXXXX";
const char* password = "XXXXXXXX";

// Gmail SMTP Settings
#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 465
#define AUTHOR_EMAIL "abc@gmail.com"
#define AUTHOR_PASSWORD "xxxx xxxx xxxx xxxx"

// Recipient List
const char* recipients[][2] = {
  {"Primary Contact", "abc@gmail.com"},
  {"Family Member", "xyz@gmail.com"},
  {"Friend", "123@gmail.com"}
};

SMTPSession smtp;

void setup() {
  Serial.begin(115200);
  connectToWiFi();

  if (!syncTime()) return;

  // Simulate trigger (replace with button/sensor)
  sendSOSAlert();
}

void connectToWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("üîå Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");
}

bool syncTime() {
  configTime(0, 0, "pool.ntp.org", "time.nist.gov");
  Serial.print("‚è≥ Syncing time");
  time_t now = time(nullptr);
  unsigned long start = millis();

  while (now < 8 * 3600 * 2 && millis() - start < 10000) {
    delay(500);
    Serial.print(".");
    now = time(nullptr);
  }

  if (now < 8 * 3600 * 2) {
    Serial.println("\n‚ùå Time sync failed.");
    return false;
  }

  Serial.println("\n‚úÖ Time synced: " + String(ctime(&now)));
  return true;
}

void sendSOSAlert() {
  SMTP_Message message;

  // üìç Simulated GPS Data (use real GPS for live tracking)
  float latitude = 22.5726;
  float longitude = 88.3639;
  String locationURL = "https://www.google.com/maps/search/?api=1&query=" +
                       String(latitude, 6) + "," + String(longitude, 6);

  // üë§ User Info
  String userName = "X";

  // ‚è± Time
  time_t now = time(nullptr);
  String timestamp = String(ctime(&now));
  timestamp.trim();

  // üìß Email Subject
  message.subject = "[SOS ALERT] Distress Triggered by " + userName + " | " + timestamp;

  // Sender Details
  message.sender.name = "ESP32 SOS Alert System";
  message.sender.email = AUTHOR_EMAIL;
  message.priority = esp_mail_smtp_priority::esp_mail_smtp_priority_high;

  // Add Recipients
  for (int i = 0; i < sizeof(recipients) / sizeof(recipients[0]); i++) {
    message.addRecipient(recipients[i][0], recipients[i][1]);
  }

  // üìÑ Email Body
  String body =
    "Hello,\n\n"
    "üö® An SOS distress alert has been triggered by the Women Safety Device.\n\n"
    "üÜò SOS Alert Information:\n"
    "--------------------------------------------\n"
    "üë§ User: " + userName + "\n"
    "üìç Location: Near College Main Gate\n"
    "üìÖ Date & Time: " + timestamp + "\n\n"
    "üìå Live Location:\n" + locationURL + "\n\n"  // Gmail auto-previews this link
    "Recommended Action:\n"
    "--------------------------------------------\n"
    "‚ö†Ô∏è Please contact the individual immediately.\n"
    "üìû If unresponsive, notify local authorities.\n\n"
    "This is an automated alert generated by the ESP32 SOS Monitoring System.\n\n"
    "Stay Alert. Stay Safe.\n\n"
    "Sincerely,\n"
    "ESP32 SOS System\n"
    "üìß " + String(AUTHOR_EMAIL);

  // Set Message Content
  message.text.content = body;
  message.text.charSet = "utf-8";
  message.text.transfer_encoding = Content_Transfer_Encoding::enc_7bit;

  // Configure SMTP
  ESP_Mail_Session session;
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  smtp.debug(1);

  // Send Email
  if (!smtp.connect(&session)) {
    Serial.println("‚ùå SMTP connection failed.");
    return;
  }

  if (!MailClient.sendMail(&smtp, &message, true)) {
    Serial.println("‚ùå Email send failed.");
    Serial.println("Error: " + smtp.errorReason());
  } else {
    Serial.println("‚úÖ SOS Email sent successfully with map preview!");
  }

  smtp.closeSession();
}

void loop() {
  // Replace this with button or trigger in real device
}
